// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

#![allow(unused, clippy::all)]
use spacetimedb_sdk::__codegen::{self as __sdk, __lib, __sats, __ws};

use super::bevy_transform_type::BevyTransform;

#[derive(__lib::ser::Serialize, __lib::de::Deserialize, Clone, PartialEq, Debug)]
#[sats(crate = __lib)]
pub(super) struct UpdateTracksSystemArgs {
    pub owner_identity: __sdk::Identity,
    pub position: BevyTransform,
    pub rotation: f32,
    pub width: f32,
    pub height: f32,
    pub id: u64,
}

impl From<UpdateTracksSystemArgs> for super::Reducer {
    fn from(args: UpdateTracksSystemArgs) -> Self {
        Self::UpdateTracksSystem {
            owner_identity: args.owner_identity,
            position: args.position,
            rotation: args.rotation,
            width: args.width,
            height: args.height,
            id: args.id,
        }
    }
}

impl __sdk::InModule for UpdateTracksSystemArgs {
    type Module = super::RemoteModule;
}

pub struct UpdateTracksSystemCallbackId(__sdk::CallbackId);

#[allow(non_camel_case_types)]
/// Extension trait for access to the reducer `update_tracks_system`.
///
/// Implemented for [`super::RemoteReducers`].
pub trait update_tracks_system {
    /// Request that the remote module invoke the reducer `update_tracks_system` to run as soon as possible.
    ///
    /// This method returns immediately, and errors only if we are unable to send the request.
    /// The reducer will run asynchronously in the future,
    ///  and its status can be observed by listening for [`Self::on_update_tracks_system`] callbacks.
    fn update_tracks_system(
        &self,
        owner_identity: __sdk::Identity,
        position: BevyTransform,
        rotation: f32,
        width: f32,
        height: f32,
        id: u64,
    ) -> __sdk::Result<()>;
    /// Register a callback to run whenever we are notified of an invocation of the reducer `update_tracks_system`.
    ///
    /// Callbacks should inspect the [`__sdk::ReducerEvent`] contained in the [`super::ReducerEventContext`]
    /// to determine the reducer's status.
    ///
    /// The returned [`UpdateTracksSystemCallbackId`] can be passed to [`Self::remove_on_update_tracks_system`]
    /// to cancel the callback.
    fn on_update_tracks_system(
        &self,
        callback: impl FnMut(
                &super::ReducerEventContext,
                &__sdk::Identity,
                &BevyTransform,
                &f32,
                &f32,
                &f32,
                &u64,
            ) + Send
            + 'static,
    ) -> UpdateTracksSystemCallbackId;
    /// Cancel a callback previously registered by [`Self::on_update_tracks_system`],
    /// causing it not to run in the future.
    fn remove_on_update_tracks_system(&self, callback: UpdateTracksSystemCallbackId);
}

impl update_tracks_system for super::RemoteReducers {
    fn update_tracks_system(
        &self,
        owner_identity: __sdk::Identity,
        position: BevyTransform,
        rotation: f32,
        width: f32,
        height: f32,
        id: u64,
    ) -> __sdk::Result<()> {
        self.imp.call_reducer(
            "update_tracks_system",
            UpdateTracksSystemArgs {
                owner_identity,
                position,
                rotation,
                width,
                height,
                id,
            },
        )
    }
    fn on_update_tracks_system(
        &self,
        mut callback: impl FnMut(
                &super::ReducerEventContext,
                &__sdk::Identity,
                &BevyTransform,
                &f32,
                &f32,
                &f32,
                &u64,
            ) + Send
            + 'static,
    ) -> UpdateTracksSystemCallbackId {
        UpdateTracksSystemCallbackId(self.imp.on_reducer(
            "update_tracks_system",
            Box::new(move |ctx: &super::ReducerEventContext| {
                let super::ReducerEventContext {
                    event:
                        __sdk::ReducerEvent {
                            reducer:
                                super::Reducer::UpdateTracksSystem {
                                    owner_identity,
                                    position,
                                    rotation,
                                    width,
                                    height,
                                    id,
                                },
                            ..
                        },
                    ..
                } = ctx
                else {
                    unreachable!()
                };
                callback(ctx, owner_identity, position, rotation, width, height, id)
            }),
        ))
    }
    fn remove_on_update_tracks_system(&self, callback: UpdateTracksSystemCallbackId) {
        self.imp
            .remove_on_reducer("update_tracks_system", callback.0)
    }
}

#[allow(non_camel_case_types)]
#[doc(hidden)]
/// Extension trait for setting the call-flags for the reducer `update_tracks_system`.
///
/// Implemented for [`super::SetReducerFlags`].
///
/// This type is currently unstable and may be removed without a major version bump.
pub trait set_flags_for_update_tracks_system {
    /// Set the call-reducer flags for the reducer `update_tracks_system` to `flags`.
    ///
    /// This type is currently unstable and may be removed without a major version bump.
    fn update_tracks_system(&self, flags: __ws::CallReducerFlags);
}

impl set_flags_for_update_tracks_system for super::SetReducerFlags {
    fn update_tracks_system(&self, flags: __ws::CallReducerFlags) {
        self.imp
            .set_call_reducer_flags("update_tracks_system", flags);
    }
}
