// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

#![allow(unused, clippy::all)]
use spacetimedb_sdk::__codegen::{self as __sdk, __lib, __sats, __ws};

use super::owner_type_type::OwnerType;

#[derive(__lib::ser::Serialize, __lib::de::Deserialize, Clone, PartialEq, Debug)]
#[sats(crate = __lib)]
pub(super) struct UpdateBlockOwnerArgs {
    pub block_id: u64,
    pub new_owner: OwnerType,
    pub offset_x: i32,
    pub offset_y: i32,
}

impl From<UpdateBlockOwnerArgs> for super::Reducer {
    fn from(args: UpdateBlockOwnerArgs) -> Self {
        Self::UpdateBlockOwner {
            block_id: args.block_id,
            new_owner: args.new_owner,
            offset_x: args.offset_x,
            offset_y: args.offset_y,
        }
    }
}

impl __sdk::InModule for UpdateBlockOwnerArgs {
    type Module = super::RemoteModule;
}

pub struct UpdateBlockOwnerCallbackId(__sdk::CallbackId);

#[allow(non_camel_case_types)]
/// Extension trait for access to the reducer `update_block_owner`.
///
/// Implemented for [`super::RemoteReducers`].
pub trait update_block_owner {
    /// Request that the remote module invoke the reducer `update_block_owner` to run as soon as possible.
    ///
    /// This method returns immediately, and errors only if we are unable to send the request.
    /// The reducer will run asynchronously in the future,
    ///  and its status can be observed by listening for [`Self::on_update_block_owner`] callbacks.
    fn update_block_owner(
        &self,
        block_id: u64,
        new_owner: OwnerType,
        offset_x: i32,
        offset_y: i32,
    ) -> __sdk::Result<()>;
    /// Register a callback to run whenever we are notified of an invocation of the reducer `update_block_owner`.
    ///
    /// Callbacks should inspect the [`__sdk::ReducerEvent`] contained in the [`super::ReducerEventContext`]
    /// to determine the reducer's status.
    ///
    /// The returned [`UpdateBlockOwnerCallbackId`] can be passed to [`Self::remove_on_update_block_owner`]
    /// to cancel the callback.
    fn on_update_block_owner(
        &self,
        callback: impl FnMut(&super::ReducerEventContext, &u64, &OwnerType, &i32, &i32) + Send + 'static,
    ) -> UpdateBlockOwnerCallbackId;
    /// Cancel a callback previously registered by [`Self::on_update_block_owner`],
    /// causing it not to run in the future.
    fn remove_on_update_block_owner(&self, callback: UpdateBlockOwnerCallbackId);
}

impl update_block_owner for super::RemoteReducers {
    fn update_block_owner(
        &self,
        block_id: u64,
        new_owner: OwnerType,
        offset_x: i32,
        offset_y: i32,
    ) -> __sdk::Result<()> {
        self.imp.call_reducer(
            "update_block_owner",
            UpdateBlockOwnerArgs {
                block_id,
                new_owner,
                offset_x,
                offset_y,
            },
        )
    }
    fn on_update_block_owner(
        &self,
        mut callback: impl FnMut(&super::ReducerEventContext, &u64, &OwnerType, &i32, &i32)
            + Send
            + 'static,
    ) -> UpdateBlockOwnerCallbackId {
        UpdateBlockOwnerCallbackId(self.imp.on_reducer(
            "update_block_owner",
            Box::new(move |ctx: &super::ReducerEventContext| {
                let super::ReducerEventContext {
                    event:
                        __sdk::ReducerEvent {
                            reducer:
                                super::Reducer::UpdateBlockOwner {
                                    block_id,
                                    new_owner,
                                    offset_x,
                                    offset_y,
                                },
                            ..
                        },
                    ..
                } = ctx
                else {
                    unreachable!()
                };
                callback(ctx, block_id, new_owner, offset_x, offset_y)
            }),
        ))
    }
    fn remove_on_update_block_owner(&self, callback: UpdateBlockOwnerCallbackId) {
        self.imp.remove_on_reducer("update_block_owner", callback.0)
    }
}

#[allow(non_camel_case_types)]
#[doc(hidden)]
/// Extension trait for setting the call-flags for the reducer `update_block_owner`.
///
/// Implemented for [`super::SetReducerFlags`].
///
/// This type is currently unstable and may be removed without a major version bump.
pub trait set_flags_for_update_block_owner {
    /// Set the call-reducer flags for the reducer `update_block_owner` to `flags`.
    ///
    /// This type is currently unstable and may be removed without a major version bump.
    fn update_block_owner(&self, flags: __ws::CallReducerFlags);
}

impl set_flags_for_update_block_owner for super::SetReducerFlags {
    fn update_block_owner(&self, flags: __ws::CallReducerFlags) {
        self.imp.set_call_reducer_flags("update_block_owner", flags);
    }
}
