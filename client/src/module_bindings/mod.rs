// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

#![allow(unused, clippy::all)]
use spacetimedb_sdk::__codegen::{self as __sdk, __lib, __sats, __ws};

pub mod bevy_transform_type;
pub mod block_table;
pub mod block_type;
pub mod bot_type;
pub mod bots_table;
pub mod damage_obstacle_reducer;
pub mod decrease_grid_load_reducer;
pub mod generate_leaderboard_reducer;
pub mod grid_type;
pub mod hook_type;
pub mod leaderboard_table;
pub mod leaderboard_type;
pub mod obstacle_table;
pub mod obstacle_type;
pub mod owner_type_type;
pub mod player_connected_reducer;
pub mod player_disconnected_reducer;
pub mod player_table;
pub mod player_type;
pub mod set_name_reducer;
pub mod track_table;
pub mod track_type;
pub mod update_block_owner_reducer;
pub mod update_bot_position_reducer;
pub mod update_hook_movement_reducer;
pub mod update_hook_position_reducer;
pub mod update_owner_grid_reducer;
pub mod update_player_position_reducer;
pub mod update_tracks_system_reducer;
pub mod vec_2_type;
pub mod vec_3_space_type;

pub use bevy_transform_type::BevyTransform;
pub use block_table::*;
pub use block_type::Block;
pub use bot_type::Bot;
pub use bots_table::*;
pub use damage_obstacle_reducer::{
    damage_obstacle, set_flags_for_damage_obstacle, DamageObstacleCallbackId,
};
pub use decrease_grid_load_reducer::{
    decrease_grid_load, set_flags_for_decrease_grid_load, DecreaseGridLoadCallbackId,
};
pub use generate_leaderboard_reducer::{
    generate_leaderboard, set_flags_for_generate_leaderboard, GenerateLeaderboardCallbackId,
};
pub use grid_type::Grid;
pub use hook_type::Hook;
pub use leaderboard_table::*;
pub use leaderboard_type::Leaderboard;
pub use obstacle_table::*;
pub use obstacle_type::Obstacle;
pub use owner_type_type::OwnerType;
pub use player_connected_reducer::{
    player_connected, set_flags_for_player_connected, PlayerConnectedCallbackId,
};
pub use player_disconnected_reducer::{
    player_disconnected, set_flags_for_player_disconnected, PlayerDisconnectedCallbackId,
};
pub use player_table::*;
pub use player_type::Player;
pub use set_name_reducer::{set_flags_for_set_name, set_name, SetNameCallbackId};
pub use track_table::*;
pub use track_type::Track;
pub use update_block_owner_reducer::{
    set_flags_for_update_block_owner, update_block_owner, UpdateBlockOwnerCallbackId,
};
pub use update_bot_position_reducer::{
    set_flags_for_update_bot_position, update_bot_position, UpdateBotPositionCallbackId,
};
pub use update_hook_movement_reducer::{
    set_flags_for_update_hook_movement, update_hook_movement, UpdateHookMovementCallbackId,
};
pub use update_hook_position_reducer::{
    set_flags_for_update_hook_position, update_hook_position, UpdateHookPositionCallbackId,
};
pub use update_owner_grid_reducer::{
    set_flags_for_update_owner_grid, update_owner_grid, UpdateOwnerGridCallbackId,
};
pub use update_player_position_reducer::{
    set_flags_for_update_player_position, update_player_position, UpdatePlayerPositionCallbackId,
};
pub use update_tracks_system_reducer::{
    set_flags_for_update_tracks_system, update_tracks_system, UpdateTracksSystemCallbackId,
};
pub use vec_2_type::Vec2;
pub use vec_3_space_type::Vec3Space;

#[derive(Clone, PartialEq, Debug)]

/// One of the reducers defined by this module.
///
/// Contained within a [`__sdk::ReducerEvent`] in [`EventContext`]s for reducer events
/// to indicate which reducer caused the event.

pub enum Reducer {
    DamageObstacle {
        id: u64,
        damage: u32,
    },
    DecreaseGridLoad {
        identity: __sdk::Identity,
        load: i32,
    },
    GenerateLeaderboard,
    PlayerConnected,
    PlayerDisconnected,
    SetName {
        name: String,
    },
    UpdateBlockOwner {
        block_id: u64,
        new_owner: OwnerType,
        offset_x: i32,
        offset_y: i32,
    },
    UpdateBotPosition {
        bot_id: u64,
    },
    UpdateHookMovement {
        identity: __sdk::Identity,
        width: f32,
        height: f32,
    },
    UpdateHookPosition {
        identity: __sdk::Identity,
        position: Vec2,
        rotation: f32,
    },
    UpdateOwnerGrid {
        load: i32,
        next_free_x: i32,
        next_free_y: i32,
    },
    UpdatePlayerPosition {
        bevy_transform: BevyTransform,
    },
    UpdateTracksSystem {
        owner_identity: __sdk::Identity,
        position: BevyTransform,
        rotation: f32,
        width: f32,
        height: f32,
        id: u64,
    },
}

impl __sdk::InModule for Reducer {
    type Module = RemoteModule;
}

impl __sdk::Reducer for Reducer {
    fn reducer_name(&self) -> &'static str {
        match self {
            Reducer::DamageObstacle { .. } => "damage_obstacle",
            Reducer::DecreaseGridLoad { .. } => "decrease_grid_load",
            Reducer::GenerateLeaderboard => "generate_leaderboard",
            Reducer::PlayerConnected => "player_connected",
            Reducer::PlayerDisconnected => "player_disconnected",
            Reducer::SetName { .. } => "set_name",
            Reducer::UpdateBlockOwner { .. } => "update_block_owner",
            Reducer::UpdateBotPosition { .. } => "update_bot_position",
            Reducer::UpdateHookMovement { .. } => "update_hook_movement",
            Reducer::UpdateHookPosition { .. } => "update_hook_position",
            Reducer::UpdateOwnerGrid { .. } => "update_owner_grid",
            Reducer::UpdatePlayerPosition { .. } => "update_player_position",
            Reducer::UpdateTracksSystem { .. } => "update_tracks_system",
        }
    }
}
impl TryFrom<__ws::ReducerCallInfo<__ws::BsatnFormat>> for Reducer {
    type Error = __sdk::Error;
    fn try_from(value: __ws::ReducerCallInfo<__ws::BsatnFormat>) -> __sdk::Result<Self> {
        match &value.reducer_name[..] {
            "damage_obstacle" => Ok(__sdk::parse_reducer_args::<
                damage_obstacle_reducer::DamageObstacleArgs,
            >("damage_obstacle", &value.args)?
            .into()),
            "decrease_grid_load" => Ok(__sdk::parse_reducer_args::<
                decrease_grid_load_reducer::DecreaseGridLoadArgs,
            >("decrease_grid_load", &value.args)?
            .into()),
            "generate_leaderboard" => Ok(__sdk::parse_reducer_args::<
                generate_leaderboard_reducer::GenerateLeaderboardArgs,
            >("generate_leaderboard", &value.args)?
            .into()),
            "player_connected" => Ok(__sdk::parse_reducer_args::<
                player_connected_reducer::PlayerConnectedArgs,
            >("player_connected", &value.args)?
            .into()),
            "player_disconnected" => Ok(__sdk::parse_reducer_args::<
                player_disconnected_reducer::PlayerDisconnectedArgs,
            >("player_disconnected", &value.args)?
            .into()),
            "set_name" => Ok(__sdk::parse_reducer_args::<set_name_reducer::SetNameArgs>(
                "set_name",
                &value.args,
            )?
            .into()),
            "update_block_owner" => Ok(__sdk::parse_reducer_args::<
                update_block_owner_reducer::UpdateBlockOwnerArgs,
            >("update_block_owner", &value.args)?
            .into()),
            "update_bot_position" => Ok(__sdk::parse_reducer_args::<
                update_bot_position_reducer::UpdateBotPositionArgs,
            >("update_bot_position", &value.args)?
            .into()),
            "update_hook_movement" => Ok(__sdk::parse_reducer_args::<
                update_hook_movement_reducer::UpdateHookMovementArgs,
            >("update_hook_movement", &value.args)?
            .into()),
            "update_hook_position" => Ok(__sdk::parse_reducer_args::<
                update_hook_position_reducer::UpdateHookPositionArgs,
            >("update_hook_position", &value.args)?
            .into()),
            "update_owner_grid" => Ok(__sdk::parse_reducer_args::<
                update_owner_grid_reducer::UpdateOwnerGridArgs,
            >("update_owner_grid", &value.args)?
            .into()),
            "update_player_position" => Ok(__sdk::parse_reducer_args::<
                update_player_position_reducer::UpdatePlayerPositionArgs,
            >("update_player_position", &value.args)?
            .into()),
            "update_tracks_system" => Ok(__sdk::parse_reducer_args::<
                update_tracks_system_reducer::UpdateTracksSystemArgs,
            >("update_tracks_system", &value.args)?
            .into()),
            unknown => {
                Err(
                    __sdk::InternalError::unknown_name("reducer", unknown, "ReducerCallInfo")
                        .into(),
                )
            }
        }
    }
}

#[derive(Default)]
#[allow(non_snake_case)]
#[doc(hidden)]
pub struct DbUpdate {
    block: __sdk::TableUpdate<Block>,
    bots: __sdk::TableUpdate<Bot>,
    leaderboard: __sdk::TableUpdate<Leaderboard>,
    obstacle: __sdk::TableUpdate<Obstacle>,
    player: __sdk::TableUpdate<Player>,
    track: __sdk::TableUpdate<Track>,
}

impl TryFrom<__ws::DatabaseUpdate<__ws::BsatnFormat>> for DbUpdate {
    type Error = __sdk::Error;
    fn try_from(raw: __ws::DatabaseUpdate<__ws::BsatnFormat>) -> Result<Self, Self::Error> {
        let mut db_update = DbUpdate::default();
        for table_update in raw.tables {
            match &table_update.table_name[..] {
                "block" => db_update.block = block_table::parse_table_update(table_update)?,
                "bots" => db_update.bots = bots_table::parse_table_update(table_update)?,
                "leaderboard" => {
                    db_update.leaderboard = leaderboard_table::parse_table_update(table_update)?
                }
                "obstacle" => {
                    db_update.obstacle = obstacle_table::parse_table_update(table_update)?
                }
                "player" => db_update.player = player_table::parse_table_update(table_update)?,
                "track" => db_update.track = track_table::parse_table_update(table_update)?,

                unknown => {
                    return Err(__sdk::InternalError::unknown_name(
                        "table",
                        unknown,
                        "DatabaseUpdate",
                    )
                    .into());
                }
            }
        }
        Ok(db_update)
    }
}

impl __sdk::InModule for DbUpdate {
    type Module = RemoteModule;
}

impl __sdk::DbUpdate for DbUpdate {
    fn apply_to_client_cache(
        &self,
        cache: &mut __sdk::ClientCache<RemoteModule>,
    ) -> AppliedDiff<'_> {
        let mut diff = AppliedDiff::default();

        diff.block = cache
            .apply_diff_to_table::<Block>("block", &self.block)
            .with_updates_by_pk(|row| &row.id);
        diff.bots = cache
            .apply_diff_to_table::<Bot>("bots", &self.bots)
            .with_updates_by_pk(|row| &row.id);
        diff.leaderboard = cache
            .apply_diff_to_table::<Leaderboard>("leaderboard", &self.leaderboard)
            .with_updates_by_pk(|row| &row.id);
        diff.obstacle = cache
            .apply_diff_to_table::<Obstacle>("obstacle", &self.obstacle)
            .with_updates_by_pk(|row| &row.id);
        diff.player = cache
            .apply_diff_to_table::<Player>("player", &self.player)
            .with_updates_by_pk(|row| &row.identity);
        diff.track = cache
            .apply_diff_to_table::<Track>("track", &self.track)
            .with_updates_by_pk(|row| &row.owner_identity);

        diff
    }
}

#[derive(Default)]
#[allow(non_snake_case)]
#[doc(hidden)]
pub struct AppliedDiff<'r> {
    block: __sdk::TableAppliedDiff<'r, Block>,
    bots: __sdk::TableAppliedDiff<'r, Bot>,
    leaderboard: __sdk::TableAppliedDiff<'r, Leaderboard>,
    obstacle: __sdk::TableAppliedDiff<'r, Obstacle>,
    player: __sdk::TableAppliedDiff<'r, Player>,
    track: __sdk::TableAppliedDiff<'r, Track>,
}

impl __sdk::InModule for AppliedDiff<'_> {
    type Module = RemoteModule;
}

impl<'r> __sdk::AppliedDiff<'r> for AppliedDiff<'r> {
    fn invoke_row_callbacks(
        &self,
        event: &EventContext,
        callbacks: &mut __sdk::DbCallbacks<RemoteModule>,
    ) {
        callbacks.invoke_table_row_callbacks::<Block>("block", &self.block, event);
        callbacks.invoke_table_row_callbacks::<Bot>("bots", &self.bots, event);
        callbacks.invoke_table_row_callbacks::<Leaderboard>(
            "leaderboard",
            &self.leaderboard,
            event,
        );
        callbacks.invoke_table_row_callbacks::<Obstacle>("obstacle", &self.obstacle, event);
        callbacks.invoke_table_row_callbacks::<Player>("player", &self.player, event);
        callbacks.invoke_table_row_callbacks::<Track>("track", &self.track, event);
    }
}

#[doc(hidden)]
pub struct RemoteModule;

impl __sdk::InModule for RemoteModule {
    type Module = Self;
}

/// The `reducers` field of [`EventContext`] and [`DbConnection`],
/// with methods provided by extension traits for each reducer defined by the module.
pub struct RemoteReducers {
    imp: __sdk::DbContextImpl<RemoteModule>,
}

impl __sdk::InModule for RemoteReducers {
    type Module = RemoteModule;
}

#[doc(hidden)]
/// The `set_reducer_flags` field of [`DbConnection`],
/// with methods provided by extension traits for each reducer defined by the module.
/// Each method sets the flags for the reducer with the same name.
///
/// This type is currently unstable and may be removed without a major version bump.
pub struct SetReducerFlags {
    imp: __sdk::DbContextImpl<RemoteModule>,
}

impl __sdk::InModule for SetReducerFlags {
    type Module = RemoteModule;
}

/// The `db` field of [`EventContext`] and [`DbConnection`],
/// with methods provided by extension traits for each table defined by the module.
pub struct RemoteTables {
    imp: __sdk::DbContextImpl<RemoteModule>,
}

impl __sdk::InModule for RemoteTables {
    type Module = RemoteModule;
}

/// A connection to a remote module, including a materialized view of a subset of the database.
///
/// Connect to a remote module by calling [`DbConnection::builder`]
/// and using the [`__sdk::DbConnectionBuilder`] builder-pattern constructor.
///
/// You must explicitly advance the connection by calling any one of:
///
/// - [`DbConnection::frame_tick`].
/// - [`DbConnection::run_threaded`].
/// - [`DbConnection::run_async`].
/// - [`DbConnection::advance_one_message`].
/// - [`DbConnection::advance_one_message_blocking`].
/// - [`DbConnection::advance_one_message_async`].
///
/// Which of these methods you should call depends on the specific needs of your application,
/// but you must call one of them, or else the connection will never progress.
pub struct DbConnection {
    /// Access to tables defined by the module via extension traits implemented for [`RemoteTables`].
    pub db: RemoteTables,
    /// Access to reducers defined by the module via extension traits implemented for [`RemoteReducers`].
    pub reducers: RemoteReducers,
    #[doc(hidden)]
    /// Access to setting the call-flags of each reducer defined for each reducer defined by the module
    /// via extension traits implemented for [`SetReducerFlags`].
    ///
    /// This type is currently unstable and may be removed without a major version bump.
    pub set_reducer_flags: SetReducerFlags,

    imp: __sdk::DbContextImpl<RemoteModule>,
}

impl __sdk::InModule for DbConnection {
    type Module = RemoteModule;
}

impl __sdk::DbContext for DbConnection {
    type DbView = RemoteTables;
    type Reducers = RemoteReducers;
    type SetReducerFlags = SetReducerFlags;

    fn db(&self) -> &Self::DbView {
        &self.db
    }
    fn reducers(&self) -> &Self::Reducers {
        &self.reducers
    }
    fn set_reducer_flags(&self) -> &Self::SetReducerFlags {
        &self.set_reducer_flags
    }

    fn is_active(&self) -> bool {
        self.imp.is_active()
    }

    fn disconnect(&self) -> __sdk::Result<()> {
        self.imp.disconnect()
    }

    type SubscriptionBuilder = __sdk::SubscriptionBuilder<RemoteModule>;

    fn subscription_builder(&self) -> Self::SubscriptionBuilder {
        __sdk::SubscriptionBuilder::new(&self.imp)
    }

    fn try_identity(&self) -> Option<__sdk::Identity> {
        self.imp.try_identity()
    }
    fn connection_id(&self) -> __sdk::ConnectionId {
        self.imp.connection_id()
    }
}

impl DbConnection {
    /// Builder-pattern constructor for a connection to a remote module.
    ///
    /// See [`__sdk::DbConnectionBuilder`] for required and optional configuration for the new connection.
    pub fn builder() -> __sdk::DbConnectionBuilder<RemoteModule> {
        __sdk::DbConnectionBuilder::new()
    }

    /// If any WebSocket messages are waiting, process one of them.
    ///
    /// Returns `true` if a message was processed, or `false` if the queue is empty.
    /// Callers should invoke this message in a loop until it returns `false`
    /// or for as much time is available to process messages.
    ///
    /// Returns an error if the connection is disconnected.
    /// If the disconnection in question was normal,
    ///  i.e. the result of a call to [`__sdk::DbContext::disconnect`],
    /// the returned error will be downcastable to [`__sdk::DisconnectedError`].
    ///
    /// This is a low-level primitive exposed for power users who need significant control over scheduling.
    /// Most applications should call [`Self::frame_tick`] each frame
    /// to fully exhaust the queue whenever time is available.
    pub fn advance_one_message(&self) -> __sdk::Result<bool> {
        self.imp.advance_one_message()
    }

    /// Process one WebSocket message, potentially blocking the current thread until one is received.
    ///
    /// Returns an error if the connection is disconnected.
    /// If the disconnection in question was normal,
    ///  i.e. the result of a call to [`__sdk::DbContext::disconnect`],
    /// the returned error will be downcastable to [`__sdk::DisconnectedError`].
    ///
    /// This is a low-level primitive exposed for power users who need significant control over scheduling.
    /// Most applications should call [`Self::run_threaded`] to spawn a thread
    /// which advances the connection automatically.
    pub fn advance_one_message_blocking(&self) -> __sdk::Result<()> {
        self.imp.advance_one_message_blocking()
    }

    /// Process one WebSocket message, `await`ing until one is received.
    ///
    /// Returns an error if the connection is disconnected.
    /// If the disconnection in question was normal,
    ///  i.e. the result of a call to [`__sdk::DbContext::disconnect`],
    /// the returned error will be downcastable to [`__sdk::DisconnectedError`].
    ///
    /// This is a low-level primitive exposed for power users who need significant control over scheduling.
    /// Most applications should call [`Self::run_async`] to run an `async` loop
    /// which advances the connection when polled.
    pub async fn advance_one_message_async(&self) -> __sdk::Result<()> {
        self.imp.advance_one_message_async().await
    }

    /// Process all WebSocket messages waiting in the queue,
    /// then return without `await`ing or blocking the current thread.
    pub fn frame_tick(&self) -> __sdk::Result<()> {
        self.imp.frame_tick()
    }

    /// Spawn a thread which processes WebSocket messages as they are received.
    pub fn run_threaded(&self) -> std::thread::JoinHandle<()> {
        self.imp.run_threaded()
    }

    /// Run an `async` loop which processes WebSocket messages when polled.
    pub async fn run_async(&self) -> __sdk::Result<()> {
        self.imp.run_async().await
    }
}

impl __sdk::DbConnection for DbConnection {
    fn new(imp: __sdk::DbContextImpl<RemoteModule>) -> Self {
        Self {
            db: RemoteTables { imp: imp.clone() },
            reducers: RemoteReducers { imp: imp.clone() },
            set_reducer_flags: SetReducerFlags { imp: imp.clone() },
            imp,
        }
    }
}

/// A handle on a subscribed query.
// TODO: Document this better after implementing the new subscription API.
#[derive(Clone)]
pub struct SubscriptionHandle {
    imp: __sdk::SubscriptionHandleImpl<RemoteModule>,
}

impl __sdk::InModule for SubscriptionHandle {
    type Module = RemoteModule;
}

impl __sdk::SubscriptionHandle for SubscriptionHandle {
    fn new(imp: __sdk::SubscriptionHandleImpl<RemoteModule>) -> Self {
        Self { imp }
    }

    /// Returns true if this subscription has been terminated due to an unsubscribe call or an error.
    fn is_ended(&self) -> bool {
        self.imp.is_ended()
    }

    /// Returns true if this subscription has been applied and has not yet been unsubscribed.
    fn is_active(&self) -> bool {
        self.imp.is_active()
    }

    /// Unsubscribe from the query controlled by this `SubscriptionHandle`,
    /// then run `on_end` when its rows are removed from the client cache.
    fn unsubscribe_then(self, on_end: __sdk::OnEndedCallback<RemoteModule>) -> __sdk::Result<()> {
        self.imp.unsubscribe_then(Some(on_end))
    }

    fn unsubscribe(self) -> __sdk::Result<()> {
        self.imp.unsubscribe_then(None)
    }
}

/// Alias trait for a [`__sdk::DbContext`] connected to this module,
/// with that trait's associated types bounded to this module's concrete types.
///
/// Users can use this trait as a boundary on definitions which should accept
/// either a [`DbConnection`] or an [`EventContext`] and operate on either.
pub trait RemoteDbContext:
    __sdk::DbContext<
    DbView = RemoteTables,
    Reducers = RemoteReducers,
    SetReducerFlags = SetReducerFlags,
    SubscriptionBuilder = __sdk::SubscriptionBuilder<RemoteModule>,
>
{
}
impl<
        Ctx: __sdk::DbContext<
            DbView = RemoteTables,
            Reducers = RemoteReducers,
            SetReducerFlags = SetReducerFlags,
            SubscriptionBuilder = __sdk::SubscriptionBuilder<RemoteModule>,
        >,
    > RemoteDbContext for Ctx
{
}

/// An [`__sdk::DbContext`] augmented with a [`__sdk::Event`],
/// passed to [`__sdk::Table::on_insert`], [`__sdk::Table::on_delete`] and [`__sdk::TableWithPrimaryKey::on_update`] callbacks.
pub struct EventContext {
    /// Access to tables defined by the module via extension traits implemented for [`RemoteTables`].
    pub db: RemoteTables,
    /// Access to reducers defined by the module via extension traits implemented for [`RemoteReducers`].
    pub reducers: RemoteReducers,
    /// Access to setting the call-flags of each reducer defined for each reducer defined by the module
    /// via extension traits implemented for [`SetReducerFlags`].
    ///
    /// This type is currently unstable and may be removed without a major version bump.
    pub set_reducer_flags: SetReducerFlags,
    /// The event which caused these callbacks to run.
    pub event: __sdk::Event<Reducer>,
    imp: __sdk::DbContextImpl<RemoteModule>,
}

impl __sdk::AbstractEventContext for EventContext {
    type Event = __sdk::Event<Reducer>;
    fn event(&self) -> &Self::Event {
        &self.event
    }
    fn new(imp: __sdk::DbContextImpl<RemoteModule>, event: Self::Event) -> Self {
        Self {
            db: RemoteTables { imp: imp.clone() },
            reducers: RemoteReducers { imp: imp.clone() },
            set_reducer_flags: SetReducerFlags { imp: imp.clone() },
            event,
            imp,
        }
    }
}

impl __sdk::InModule for EventContext {
    type Module = RemoteModule;
}

impl __sdk::DbContext for EventContext {
    type DbView = RemoteTables;
    type Reducers = RemoteReducers;
    type SetReducerFlags = SetReducerFlags;

    fn db(&self) -> &Self::DbView {
        &self.db
    }
    fn reducers(&self) -> &Self::Reducers {
        &self.reducers
    }
    fn set_reducer_flags(&self) -> &Self::SetReducerFlags {
        &self.set_reducer_flags
    }

    fn is_active(&self) -> bool {
        self.imp.is_active()
    }

    fn disconnect(&self) -> __sdk::Result<()> {
        self.imp.disconnect()
    }

    type SubscriptionBuilder = __sdk::SubscriptionBuilder<RemoteModule>;

    fn subscription_builder(&self) -> Self::SubscriptionBuilder {
        __sdk::SubscriptionBuilder::new(&self.imp)
    }

    fn try_identity(&self) -> Option<__sdk::Identity> {
        self.imp.try_identity()
    }
    fn connection_id(&self) -> __sdk::ConnectionId {
        self.imp.connection_id()
    }
}

impl __sdk::EventContext for EventContext {}

/// An [`__sdk::DbContext`] augmented with a [`__sdk::ReducerEvent`],
/// passed to on-reducer callbacks.
pub struct ReducerEventContext {
    /// Access to tables defined by the module via extension traits implemented for [`RemoteTables`].
    pub db: RemoteTables,
    /// Access to reducers defined by the module via extension traits implemented for [`RemoteReducers`].
    pub reducers: RemoteReducers,
    /// Access to setting the call-flags of each reducer defined for each reducer defined by the module
    /// via extension traits implemented for [`SetReducerFlags`].
    ///
    /// This type is currently unstable and may be removed without a major version bump.
    pub set_reducer_flags: SetReducerFlags,
    /// The event which caused these callbacks to run.
    pub event: __sdk::ReducerEvent<Reducer>,
    imp: __sdk::DbContextImpl<RemoteModule>,
}

impl __sdk::AbstractEventContext for ReducerEventContext {
    type Event = __sdk::ReducerEvent<Reducer>;
    fn event(&self) -> &Self::Event {
        &self.event
    }
    fn new(imp: __sdk::DbContextImpl<RemoteModule>, event: Self::Event) -> Self {
        Self {
            db: RemoteTables { imp: imp.clone() },
            reducers: RemoteReducers { imp: imp.clone() },
            set_reducer_flags: SetReducerFlags { imp: imp.clone() },
            event,
            imp,
        }
    }
}

impl __sdk::InModule for ReducerEventContext {
    type Module = RemoteModule;
}

impl __sdk::DbContext for ReducerEventContext {
    type DbView = RemoteTables;
    type Reducers = RemoteReducers;
    type SetReducerFlags = SetReducerFlags;

    fn db(&self) -> &Self::DbView {
        &self.db
    }
    fn reducers(&self) -> &Self::Reducers {
        &self.reducers
    }
    fn set_reducer_flags(&self) -> &Self::SetReducerFlags {
        &self.set_reducer_flags
    }

    fn is_active(&self) -> bool {
        self.imp.is_active()
    }

    fn disconnect(&self) -> __sdk::Result<()> {
        self.imp.disconnect()
    }

    type SubscriptionBuilder = __sdk::SubscriptionBuilder<RemoteModule>;

    fn subscription_builder(&self) -> Self::SubscriptionBuilder {
        __sdk::SubscriptionBuilder::new(&self.imp)
    }

    fn try_identity(&self) -> Option<__sdk::Identity> {
        self.imp.try_identity()
    }
    fn connection_id(&self) -> __sdk::ConnectionId {
        self.imp.connection_id()
    }
}

impl __sdk::ReducerEventContext for ReducerEventContext {}

/// An [`__sdk::DbContext`] passed to [`__sdk::SubscriptionBuilder::on_applied`] and [`SubscriptionHandle::unsubscribe_then`] callbacks.
pub struct SubscriptionEventContext {
    /// Access to tables defined by the module via extension traits implemented for [`RemoteTables`].
    pub db: RemoteTables,
    /// Access to reducers defined by the module via extension traits implemented for [`RemoteReducers`].
    pub reducers: RemoteReducers,
    /// Access to setting the call-flags of each reducer defined for each reducer defined by the module
    /// via extension traits implemented for [`SetReducerFlags`].
    ///
    /// This type is currently unstable and may be removed without a major version bump.
    pub set_reducer_flags: SetReducerFlags,
    imp: __sdk::DbContextImpl<RemoteModule>,
}

impl __sdk::AbstractEventContext for SubscriptionEventContext {
    type Event = ();
    fn event(&self) -> &Self::Event {
        &()
    }
    fn new(imp: __sdk::DbContextImpl<RemoteModule>, _event: Self::Event) -> Self {
        Self {
            db: RemoteTables { imp: imp.clone() },
            reducers: RemoteReducers { imp: imp.clone() },
            set_reducer_flags: SetReducerFlags { imp: imp.clone() },
            imp,
        }
    }
}

impl __sdk::InModule for SubscriptionEventContext {
    type Module = RemoteModule;
}

impl __sdk::DbContext for SubscriptionEventContext {
    type DbView = RemoteTables;
    type Reducers = RemoteReducers;
    type SetReducerFlags = SetReducerFlags;

    fn db(&self) -> &Self::DbView {
        &self.db
    }
    fn reducers(&self) -> &Self::Reducers {
        &self.reducers
    }
    fn set_reducer_flags(&self) -> &Self::SetReducerFlags {
        &self.set_reducer_flags
    }

    fn is_active(&self) -> bool {
        self.imp.is_active()
    }

    fn disconnect(&self) -> __sdk::Result<()> {
        self.imp.disconnect()
    }

    type SubscriptionBuilder = __sdk::SubscriptionBuilder<RemoteModule>;

    fn subscription_builder(&self) -> Self::SubscriptionBuilder {
        __sdk::SubscriptionBuilder::new(&self.imp)
    }

    fn try_identity(&self) -> Option<__sdk::Identity> {
        self.imp.try_identity()
    }
    fn connection_id(&self) -> __sdk::ConnectionId {
        self.imp.connection_id()
    }
}

impl __sdk::SubscriptionEventContext for SubscriptionEventContext {}

/// An [`__sdk::DbContext`] augmented with a [`__sdk::Error`],
/// passed to [`__sdk::DbConnectionBuilder::on_disconnect`], [`__sdk::DbConnectionBuilder::on_connect_error`] and [`__sdk::SubscriptionBuilder::on_error`] callbacks.
pub struct ErrorContext {
    /// Access to tables defined by the module via extension traits implemented for [`RemoteTables`].
    pub db: RemoteTables,
    /// Access to reducers defined by the module via extension traits implemented for [`RemoteReducers`].
    pub reducers: RemoteReducers,
    /// Access to setting the call-flags of each reducer defined for each reducer defined by the module
    /// via extension traits implemented for [`SetReducerFlags`].
    ///
    /// This type is currently unstable and may be removed without a major version bump.
    pub set_reducer_flags: SetReducerFlags,
    /// The event which caused these callbacks to run.
    pub event: Option<__sdk::Error>,
    imp: __sdk::DbContextImpl<RemoteModule>,
}

impl __sdk::AbstractEventContext for ErrorContext {
    type Event = Option<__sdk::Error>;
    fn event(&self) -> &Self::Event {
        &self.event
    }
    fn new(imp: __sdk::DbContextImpl<RemoteModule>, event: Self::Event) -> Self {
        Self {
            db: RemoteTables { imp: imp.clone() },
            reducers: RemoteReducers { imp: imp.clone() },
            set_reducer_flags: SetReducerFlags { imp: imp.clone() },
            event,
            imp,
        }
    }
}

impl __sdk::InModule for ErrorContext {
    type Module = RemoteModule;
}

impl __sdk::DbContext for ErrorContext {
    type DbView = RemoteTables;
    type Reducers = RemoteReducers;
    type SetReducerFlags = SetReducerFlags;

    fn db(&self) -> &Self::DbView {
        &self.db
    }
    fn reducers(&self) -> &Self::Reducers {
        &self.reducers
    }
    fn set_reducer_flags(&self) -> &Self::SetReducerFlags {
        &self.set_reducer_flags
    }

    fn is_active(&self) -> bool {
        self.imp.is_active()
    }

    fn disconnect(&self) -> __sdk::Result<()> {
        self.imp.disconnect()
    }

    type SubscriptionBuilder = __sdk::SubscriptionBuilder<RemoteModule>;

    fn subscription_builder(&self) -> Self::SubscriptionBuilder {
        __sdk::SubscriptionBuilder::new(&self.imp)
    }

    fn try_identity(&self) -> Option<__sdk::Identity> {
        self.imp.try_identity()
    }
    fn connection_id(&self) -> __sdk::ConnectionId {
        self.imp.connection_id()
    }
}

impl __sdk::ErrorContext for ErrorContext {}

impl __sdk::SpacetimeModule for RemoteModule {
    type DbConnection = DbConnection;
    type EventContext = EventContext;
    type ReducerEventContext = ReducerEventContext;
    type SubscriptionEventContext = SubscriptionEventContext;
    type ErrorContext = ErrorContext;
    type Reducer = Reducer;
    type DbView = RemoteTables;
    type Reducers = RemoteReducers;
    type SetReducerFlags = SetReducerFlags;
    type DbUpdate = DbUpdate;
    type AppliedDiff<'r> = AppliedDiff<'r>;
    type SubscriptionHandle = SubscriptionHandle;

    fn register_tables(client_cache: &mut __sdk::ClientCache<Self>) {
        block_table::register_table(client_cache);
        bots_table::register_table(client_cache);
        leaderboard_table::register_table(client_cache);
        obstacle_table::register_table(client_cache);
        player_table::register_table(client_cache);
        track_table::register_table(client_cache);
    }
}
